位字段
控制位的第二种方法
位字段通过一个结构声明来建立，
该结构为每个字段提供标签，并确定该字段的宽度
节省内存空间，
int和unsigned int两种类型，
内含位字段的结构允许一个存储单元中存多个设置
某些设置有多个选择，根据需要决定位字段的位数，
可赋值范围为（2的n - 1次方） - 1；
位字段通常不容易移植
通常，把位字段作为一种更紧凑的存储数据的方式

位字段和按位运算符是两种可以替换的方法


c预处理器和c库
c预处理器
预处理之前，编译器对程序进行一些翻译处理，
定位每个反斜杠并删除他们，把若干物理行换成一个有效逻辑行

编译器把文本划分为预处理记号序列，空白序列和注释序列
编译器将用一个空格字符替换每一条注释
然后准备进入预处理阶段

#define 明示常量，	（文本替换）
预处理器指令从#开始，到第一个换行符为止
#define N 5
第二部分称为宏，名称中不允许有空格
只进行替换
宏定义还可包含其他宏
在一行结尾加反斜杠可使其扩展至下一行
双引号中的宏不会被替换
绝大部分数字常量应该使用字符常量

记号，从技术角度看，把宏看做记号型字符串

重定义常量，一般视为错误，报错或给出警告
如果需要重定义宏，使用#undef指令

类函数宏
#define MEAN（X，Y）	（（X）+（Y）/ 2）

只对参数进行替换，容易出现一些问题
解决方法，多加括号，避免在宏参数使用递加或递减

宏参数创建字符串，#运算符
可以把记号转换成字符串，
例，如果x是一个宏形参，那么#x就是转换为字符串“x”的形参名
这个过程称为字符串化
##运算符可用于类函数的替换部分，也可用于对象宏的替换部分
##运算符把两个记号组合成一个记号

预处理粘合剂##
#define XNAME(n) x ## n
XNAME(n) == xn

变参宏
通过把宏参数列表中最后的参数写成省略号实现
预定义宏__VA_ARGS__可用在替换部分中
#define PR(...) printf(__VA_ARGS__)
省略号只能代替最后的宏参数

宏在时间上有优势，函数在空间上有优势
宏的优点，不用担心变量类型
使用宏的原则，简单，被调次数很多

文件包含 #include
查看后面的文件名并把文件的内容包含到当前文件中
即替换源文件中的inclue命令，
相当于把被包含文件的全部内容输入到源文件中
两种形式	文件名在 <>尖括号	""双引号
尖括号，在标准系统目录中查找文件，
双引号首先在当前目录中查找，未找到在查找标准系统目录
#undef指令取消之前的#define定义
#line指令用于重置行和文件信息，
#error指令用于给出错误信息
#pragma指令用于向编译器发出指令

条件编译
使用条件指令告诉编译器根据编译时的条件执行或忽略信息

#ifdef MAVIS
	#include "horse.h"
	#define STABLES 5
#else
	#include "cow.h"
	#define STABLES 15
#endif

旧编译器必须左对齐，或至少左对齐对齐左#

#ifndef 判断标识符是否未定义
用于避免重复包含文件

#if和#elif		类似ifelse语句
#if SYS == 1
	#include “sys.h”
#endif

#if defined （LLL）
#elif defined （AAA）
#endif
较新编译器支持

让程序更容易移植，根据系统不同，包含不同文件

预定义宏
不能通过undef取消



c库
访问c库
自动访问，通过包含头文件
文件包含，#include指令包含定义宏函数文件
库包含，包含很多函数，查阅文档

数学库
math.h包含许多有用的数学函数

通用工具库
定义在stdilb.h头文件中
exit（）和atexit（）

atexit（）接受一个函数指针作为参数
注册被调用的函数，调用exit时会执行这些函数，至少32
个，从后向前执行
注册函数应该不带参数而且返回值为void
main函数在结束时会调用exit

qsort（）函数
最有效的排序算法之一

四个参数，第一个是指针，指向待排序数组首元素，任何类型
第二个待排序项的数量，size_t类型
第三个显示指明待排序元素中每个元素的大小sizeof（doouble）
第四个是一个函数指针，一个比较函数
该函数根据两个参数的值返回正负0，通常需要自己写

对结构进行排序

断言库
assert.h头文件支持
debug时使用，会显示失败测试，包含文件名和行号
表达式求值为零，终止
#define NDEBUG
关闭assert语句

memcpy（）和memmove（）处理任意类型数组
void* memcpy（s1，s2,n）;
void* memmove（s1，s2,n）;
s2拷贝n字节到s1，都返回s1的值

可变参数
stdarg.h
为函数提供类似变参宏的功能
至少有一个形参和一个省略号，省略号在最后
省略号的前一个形参起特殊作用，额外参数
变参列表中参数的数量


























                                