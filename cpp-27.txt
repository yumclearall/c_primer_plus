文件输入输出

从文件中读取信息或把信息写入文件，文件重定向
文件通常是在磁盘或固态硬盘上的一段已命名的存储区
c把文件看作是一系列连续的字节，每个字节都能被单独读取
这与UNIX环境中（c的发源地）的文件结构相对应
c提供两种文件模式：文本模式和二进制模式

所有文件的内容都以二进制形式储存，
如果文件最初使用二进制编码的字符表示文本，c字符串那样
该文件就是文本文件，其中包含文本内容
如果文件中的二进制代表机器语言代码或数值数据，例如long或double类型值
或图片或音乐编码，该文件就是二进制文件
UNIX、Linux用同一种文件格式处理文本文件和二进制文件的内容
c和UNIX在文本中都使用\n（换行符）表示换行
X Macintosh用\r(回车符)表示换行，早期MS-DOS文件用\r\n组合表示新的一行ctrl+z表示文件结尾

二进制模式中，程序可以访问文件的每个字节

文本模式中，程序所见内容和文件的实际内容不同

程序以文本模式读取文件时，把本地环境表示的行末尾或文件结尾映射为C模式
不同操作系统中\r,\n，\r\n在存储和读取时的相互转换

以二进制形式读写文本文件，不会发生映射，

I/O级别
底层I/O 使用操作系统提供基本I/O服务
标准高级I/O 使用c库的标准包和stdio.h文件定义

c标准只支持标准I/O包
C标准建立了可移植的I/O模型

标准文件
c程序会自动打开三个文件，
标准输入，标准输出，标准错误输出版
键盘和显示器

与底层I/O相比，标准I/O除了可移植外还有两个好处
标准I/O有许多专门的函数，简化了处理不同I/O的问题
输入和输出都是缓冲的，成块的转移信息，极大提高数据传输速率

宏EXIT_FAILURE表明结束程序失败，返回非零值

和exit（）都位于stdlib.h头文件中

putc(ch, stdout); 同 putchar(ch);

在一个递归程序中，return只会把控制权交给上一级，
直至最初的一级，exit（）可以直接结束程序

fopen（）函数，两个参数，带打开的文件名称，文件地址，
第二个是打开模式
“r”	，读模式	“w”	，写模式
“a”	，追加，写模式添加在文件末尾，没有则新建文件
“r+”	，更新模式（可读写）
“w+”	“a+”	“r+b”二进制模式打开文件“rx”

c11新增带x字母写模式，即使打开失败源文件也不会被删除
如果环境允许，x模式的独占特性使得其他程序无法访问正在被打开的文件
"wx"	,无法打开现有文件
文件打开后，fopen（）返回一个文件指针
类型是FILE的指针，
该指针并不指向实际的文件，他指向一个包含文件信息的数据对象

getc()和putc()	，可以指定某个文件
getchar（）和putchar（），默认屏幕输入输入

文件结尾，返回特殊值EOF

fclose()	,成功关闭返回0

标准输入	标准输出	标准错误
stdin		stdout	stderr

同时打开的文件数量是有限的，范围一般10-20

fprintf()	fscanf()	两个参数，第一个参数指定待处理文件

rewind（fp）；	指针返回文件开始处

fflush(fp);	刷新缓存里的信息

fgets（buf, n, fp）;	char类型数组名，字符串大小，指向FILE的指针
			仍然会输入\n
fputs(buf, fp);	字符串地址，文件指针，末尾不加换行符























