随机访问
fseek()和ftell()
可以把文件看做是数组，在fopen（）打开的文件中直接移动到任意字节处
fseek返回int类型值
ftell返回long类型值
fseek的第一个参数是FILE指针，指向待查找文件，fopen已经打开该文件
第二个参数是偏移量，
起点开始到要移动的距离，必须是long类型值
第三个参数是模式，确定该参数起始点
SEEK_SET	SEEK_CUR	SEEK_END
文件开始	当前位置	文件末尾
可使用0L,1L,2L分别表示这三种模式

如果一切正常，fseek返回0，出错返回-1
ftell返回类型是long，返回当前位置
ftell通过返回句文件开始处的字节数来确定文件的位置
适用于以二进制打开的文件

fgetpos()和fsetpos()	处理较大文件
使用一种新类型fpos_t,不能是数组类型
同feek和ftell

通常，使用标准i/o的第一步是调用fopen打开文件
fopen不仅打开一个文件，还创建了一个缓冲区以及一个包含文件和缓冲数据的结构
fopen返回一个指向该结构的指针，以便其他函数找到该结构

这个结构通常包含，一个指定流中当前位置的文件指示器		错误和文件结尾的指针
，一个指向缓冲区开始处的指针，一个文件标识符和一个计数

使用标准i/o的第二部是调用一个定义在
stdio.h中的输入函数，文件中的数据块被拷贝到缓冲区中
fscanf，getc等，文件中的数据拷贝到缓冲区

之前，面向文本，用于处理字符和字符串
fread()和fwrite()	，保存数值数据
用于以二进制形式处理数据

int num;
fwrite(&num, sizeof(int)  1,fp);
文件写入数组,通用指针类型void，	返回成功写入的数量

char num[10];
文件读取数组fread(num, sizeof(char), 10, fp);
成功返回读取数量

int feof（FILE* fp）和 int ferror(FILE* fp)
检测到文件结尾时，feof返回非零，否则fanhui0
读或写出现错误，ferror（）返回非零值，否则返回0

读到问价结尾或读取出错时，都fanhuiEOF
以上两个函数用于区分返回EOF的情况

setvbuf(fp, NULL, _IOFBF, BUFSIZE);
创建缓冲区的好处，提高运行速度

结构
结构体




































