递归和倒序循环
递归为某些编程问题提供了简单的解决方案，但可能会大量消耗储存空间

使用头文件
include “hotel.h”	，双引号表明被包含的文件位于当前目录
引用头文件，用引号
把函数原型和已定义的字符常量放在头文件中是一个良好的编程习惯

&，地址运算符、一元
指针是用于存储变量的地址
 如果主调函数不使用return返回的值，则必须要通过地址才能修改主调函数中的值
&给出变量的存储地址，可以看做是变量在内存中的位置
printf("%d	%p\n",x,&x);
int* p;	指针变量类型，用于保存某个变量的地址
*	，间接运算符

int a,c;
int* b;

b = &a;
c = *b;
等价于：c = b;

使用指针解决函数间通信

数组，int a[5] = {1,2,3,4,5};
const声明数组，只读

如果初始化数组时省略方括号中的数字，编译器会根据初始化列表中的项数来确定数组的大小

指定初始化器
int a[10] = {1,[7] = 212,333};
a[0]=1,a[7]=212,a[8]=333

指针和数组
数组名是数组首元素的地址
在c中，指针加1是指增加一个存储单元
dates + 2 == &date[2]
*(dates + 2) == dates[2]
*的运算优先级高于+

指针形参
c保证在给数组分配空间时，指向数组后面第一个位置的指针仍是有效的指针
一元运算符*和++的优先级相同，但结合律是从右往左

指针操作（八种）
指针相减得到整数，指针减整数得指针

保护数组中的数据
函数在调用数组时，产生的操作会影响原数组
，改变数组中原来的值，
原因是函数通过指针直接使用的原始数据

防止修改，在函数定义中声明形式参数时使用关键字const
例， int sum(const int arr[], int n);
产生修改会报错

指向const的指针不能用于改变值
















