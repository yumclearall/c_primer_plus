






翻译单元和文件
多个文件在编译器中可能以一个文件出现，
通常在源代码（.c）中包含一个或多个头文件(.h)

c预处理实际上是用包含的头文件内容替换#include指令，所以
编译器源代码文件和所有的头文件都看成是一个包含信息的单独文件，
这个文件被称为翻译单元

链接

外部链接，描述可延伸至其他翻译单元的作用域，（全局作用域）

内部链接，描述仅限于一个翻译单元（y一个源代码文件和他所包含的头文件的作用域）

无链接，	具有块作用域，函数作用域和函数原型作用域，
	变量属于定义他们的块，函数或原型私有，超出范围无法访问

具有文件作用域的变量可以是外部链接或内部链接，
外部链接可以再多文件程序中使用，
内部链接变量只能在一个翻译单元中使用

是否使用存储类别说明符
int a;			//文件作用域，外部链接
			其他文件都可使用
static int a;		//文件作用域，内部链接
			a所属文件私有

存储期	，描述了通过这些标识符访问的对象的生存周期

静态存储期	，在程序执行期间一直存在，文件作用域变量具有静态存储期
		对于文件作用域变量，ststic表明其链接属性，而非存储期，
		无论是内部链接还是外部链接，所有的文件作用域变量都具有静态存储期

线程存储期	，用于并发程序设计，程序可被分为多个线程，
		具有线程存储期的对象，从声明到线程结束时一直存在，
		声明一个对象时，每个线程都获得该变量的私有备份

自动存储期	，块作用域的变量通常都具有自动存储期，当程序进入定义这些变量的块时，为这些变量分配内存，
		当退出这个块时，释放刚才为变量分配的内存
		相当于把自动变量占用的内存视为一个可重复使用的工作区或暂存区
			变长数组的存储期从声明处到到块的末尾，而不是开始处
		目前使用的局部变量都是自动类别
	块作用域变量也能有静态存储，如果在函数内，声明变量时，在声明前加上关键字static
	void more()	{	static int ct = 0;	}
	从程序被载入到程序结束期间都存在，但是，他的作用域定义在more（）函数中
	只有在执行该函数时，程序才能使用ct访问他所指定的对象，
	该函数可以给其他函数提供该储存区的地址以便间接访问对象，例如通过指针形参或返回值

动态分配存储期	，

作用域和链接描述了标识符的可见性，存储期描述了这些标识符方位的对象的生存期
生命周期内，内存一直被占用，结束时释放

自动变量
属于自动存储类别的变量具有自动存储期，块作用域且无链接
为了表明有意覆盖一个外部变量定义，或者强调不要把该变量改为其他存储类别，
可以使用关键字auto	//c/c++兼容程序不要使用auto。在c++中语法完全不同
void main(void){
	auto int plox;
}

内层块中声明的变量与外层块中的变量同名，内层块会隐藏外层快的定义
离开内层块后，外层块变量的作用域又回到了原来的作用域

没有花括号的块，
if，while等子句（下面第一句）	c99标准

for (int a = 1; a < 4; a++){
		printf("a4 = %d	&a4 = %p\n",a , &a);
		int a = 4;
		printf("a5 = %d	&a5 = %p\n",a , &a);
	}
第一个整个for循环结束释放，第二个a，每次循环结束释放

寄存器变量
寄存器变量储存在寄存器而非内存中，所以无法获取寄存器变量的地址，
速度非常快，存储量小
绝大多数方面和自动变量都一样
register int a;	//不可以通过取地址符取地址
可声明为register的数据类型有限，例如可能没有足够空间存储double（32位）

块作用域的静态变量
静态变量，在内存中原地不动，值可变
可以创建具有静态存储期，块作用域的局部变量，和自动变量具有相同作用域，
但程序离开所在函数后，这些变量不会消失

静态变量和外部变量在程序被载入内存时已经执行完毕
静态变量声明在函数中，只有该函数可以看到这个变量

不能在形参中使用static

 外部链接的静态变量
具有文件作用域，外部链接和静态存储期
外部变量，把定义和声明放在所有函数的外面

为指出函数使用了外部变量，可以再函数中使用extern关键字声明
如果一个源代码文件使用的外部变量定义在另一个源代码文件中，必须用extren在该文件中声明该变量
未初始化自动为0，赋值只能是常量表达式
 int a;				，声明外部变量
void top(void){
	extren int a;		，引用外部变量
}

外部变量只能初始化一次

内部链接的静态变量
有static关键字，只在当前文件中或函数内可见

存储类别说明符
auto，		register,		static,		extern,		typedef
自动存储期		寄存器存储类别	静态		外部

外部函数和静态函数

随机函数
rand（）；	伪随机数生成器	可预测生成数字的实际序列，
开始于一个种子，使用该种子生成新的数，以此类推
引入函数srand1()重置种子
引入time（）返回系统时间，初始化种子
time.h头文件内
一般情况下，time（）接受的参数是一个time_t类型对象的地址
，也可以传入空指针（0）作为参数

stdlib.c头文件中包含srand()和rand()








